{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bootcamp2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_saledataflow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_bronze",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_salesjson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_bronze",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "sales",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silvercust')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_silver",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "customers_cleaned",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silverproduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_silver",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "product_cleaned",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silverslaes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_silver",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales_cleaned",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Restapipipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RestAPI Copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_restapi",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_salesjson",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@trim(concat('sales_data_', formatDateTime(addHours(utcNow(), -4), 'yyyy-MM-dd-HH-mm-ss'), '.json'))",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-14T15:05:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_salesjson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dflow_customers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_custdataflow",
								"type": "DatasetReference"
							},
							"name": "dscusttrgrt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silvercust",
								"type": "DatasetReference"
							},
							"name": "dssilvercust"
						}
					],
					"transformations": [
						{
							"name": "ReplaceNullofothercolumns"
						},
						{
							"name": "RemovingPhoneColumn"
						},
						{
							"name": "Distinctrowbycustid"
						},
						{
							"name": "checknullagain"
						},
						{
							"name": "RemoveNullCustID"
						},
						{
							"name": "Filterunknowncityandcountry"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename as string (concat('cust_data_',toString(year(currentDate())),toString(month(currentDate())),toString(dayOfMonth(currentDate())),'_',toString(hour(currentDate()))))",
						"}",
						"source(output(",
						"          CustomerID as short,",
						"          CustomerName as string,",
						"          Email as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dscusttrgrt",
						"RemoveNullCustID derive(Email = iif(isNull(CustomerID), Email, iif(isNull(Email), 'Unknown', Email)),",
						"          City = iif(isNull(City), 'Unknown', City),",
						"          Country = iif(isNull(Country), 'Unknown', Country)) ~> ReplaceNullofothercolumns",
						"ReplaceNullofothercolumns select(mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          Email,",
						"          City,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemovingPhoneColumn",
						"dscusttrgrt aggregate(groupBy(CustomerID),",
						"     each(match(name!='CustomerID'), $$ = first($$))) ~> Distinctrowbycustid",
						"RemovingPhoneColumn alterRow(deleteIf(isNull(CustomerID))) ~> checknullagain",
						"Distinctrowbycustid filter(!isNull(CustomerID)) ~> RemoveNullCustID",
						"checknullagain filter(City != 'Unknown' && Country != 'Unknown') ~> Filterunknowncityandcountry",
						"Filterunknowncityandcountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> dssilvercust"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silvercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dflow_products')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_productdataflow",
								"type": "DatasetReference"
							},
							"name": "productsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silverproduct",
								"type": "DatasetReference"
							},
							"name": "productsink"
						}
					],
					"transformations": [
						{
							"name": "AggregatePrice"
						},
						{
							"name": "join1"
						},
						{
							"name": "Replacepricenullvalue"
						},
						{
							"name": "DistinctbyProdid"
						},
						{
							"name": "SelectDistinctcolumns"
						},
						{
							"name": "Stockquantitycheck"
						},
						{
							"name": "Pricecheck"
						},
						{
							"name": "ProductIDtoInt"
						}
					],
					"scriptLines": [
						"parameters{",
						"     filename as string (concat('product_data_',toString(year(currentDate())),'-',toString(month(currentDate())),'-',toString(dayOfMonth(currentDate())),'-',toString(hour(currentDate())),'-',toString(minute(currentDate())),'-',toString(second(currentDate()))))",
						"}",
						"source(output(",
						"          ProductID as double,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as double,",
						"          StockQuantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> productsource",
						"productsource aggregate(groupBy(Category),",
						"     AvgPrice = round(avg(Price),2)) ~> AggregatePrice",
						"AggregatePrice, productsource join(AggregatePrice@Category == productsource@Category,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(Price = iif(isNull(Price), AvgPrice, Price)) ~> Replacepricenullvalue",
						"SelectDistinctcolumns aggregate(groupBy(ProductID),",
						"     each(match(name!='ProductID'), $$ = first($$))) ~> DistinctbyProdid",
						"Replacepricenullvalue select(mapColumn(",
						"          ProductID,",
						"          ProductName,",
						"          Category = productsource@Category,",
						"          Price,",
						"          StockQuantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDistinctcolumns",
						"DistinctbyProdid derive(StockQuantity = iif(or(equals(toString(StockQuantity), '0'), equals(toString(StockQuantity), 'None')), 0, toInteger(StockQuantity))) ~> Stockquantitycheck",
						"Stockquantitycheck derive(Price = iif(equals(toString(StockQuantity), '0'), 0, toInteger(Price))) ~> Pricecheck",
						"Pricecheck derive(ProductID = toInteger(ProductID)) ~> ProductIDtoInt",
						"ProductIDtoInt sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> productsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silverproduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dflow_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_saledataflow",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silverslaes",
								"type": "DatasetReference"
							},
							"name": "dssilversales"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedColumns",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "split1"
						},
						{
							"name": "Salesdatereplacenull"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename as string (concat('sales_data_',toString(year(currentDate())),'-',toString(month(currentDate())),'-',toString(dayOfMonth(currentDate())),'-',toString(hour(currentDate())),'-',toString(minute(currentDate())),'-',toString(second(currentDate()))))",
						"}",
						"source(output(",
						"          CustomerID as double,",
						"          ProductID as short,",
						"          Quantity as short,",
						"          SaleDate as date,",
						"          SaleID as double,",
						"          TotalAmount as double,",
						"          amount as double,",
						"          category as short,",
						"          date as date,",
						"          id as double,",
						"          value1 as double,",
						"          value2 as short,",
						"          value3 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 derive(TotalAmount = iif(isNull(TotalAmount), toDecimal(byName('amount')), toDecimal(TotalAmount)),",
						"          category = toString(byName('category')),",
						"          SaleDate = iif(isNull(SaleDate),toString(byName('date')),toString(SaleDate)),",
						"          SaleID = iif(isNull(SaleID),toString(byName('id')),toString(SaleID)),",
						"          CustomerID = iif(isNull(CustomerID),toString(byName('value1')),toString(CustomerID)),",
						"          ProductID = iif(isNull(ProductID),toString(byName('value2')),toString(ProductID)),",
						"          Quantity = iif(isNull(Quantity),toString(byName('value3')),toString(Quantity))) ~> MapDriftedColumns",
						"MapDriftedColumns select(mapColumn(",
						"          SaleID,",
						"          CustomerID,",
						"          ProductID,",
						"          SaleDate,",
						"          Quantity,",
						"          TotalAmount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns aggregate(groupBy(SaleID),",
						"     each(match(name!='SaleID'), $$ = first($$))) ~> aggregate1",
						"aggregate1 split(!isNull(CustomerID) && !isNull(ProductID) && !isNull(Quantity) && !isNull(TotalAmount),",
						"     disjoint: false) ~> split1@(ValidRecords, InValidRecords)",
						"split1@ValidRecords derive(SaleDate = iif(isNull(SaleDate), toString(currentDate()), SaleDate)) ~> Salesdatereplacenull",
						"Salesdatereplacenull sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          SaleID,",
						"          CustomerID,",
						"          ProductID,",
						"          SaleDate,",
						"          Quantity,",
						"          TotalAmount",
						"     ),",
						"     partitionBy('hash', 1)) ~> dssilversales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_saledataflow')]",
				"[concat(variables('factoryId'), '/datasets/ds_silverslaes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silvertosql')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_silverslaes",
								"type": "DatasetReference"
							},
							"name": "sales"
						},
						{
							"dataset": {
								"referenceName": "ds_silverproduct",
								"type": "DatasetReference"
							},
							"name": "product"
						},
						{
							"dataset": {
								"referenceName": "ds_silvercust",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_revenueperproduct",
								"type": "DatasetReference"
							},
							"name": "revenueperproduct"
						},
						{
							"dataset": {
								"referenceName": "ds_inventory",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						},
						{
							"dataset": {
								"referenceName": "ds_topcustspend",
								"type": "DatasetReference"
							},
							"name": "TopCustomerSpend"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join2"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "join3"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "AlterRow3"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "lookup2"
						},
						{
							"name": "lookup3"
						},
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SaleID as double,",
						"          CustomerID as double,",
						"          ProductID as short,",
						"          SaleDate as date,",
						"          Quantity as short,",
						"          TotalAmount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sales",
						"source(output(",
						"          ProductID as short,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as short,",
						"          StockQuantity as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> product",
						"source(output(",
						"          CustomerID as short,",
						"          CustomerName as string,",
						"          Email as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"sales, product join(sales@ProductID == product@ProductID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(product@ProductID,",
						"          ProductName,",
						"          Category,",
						"          Price,",
						"          StockQuantity),",
						"     TotalAmount = round(sum(TotalAmount),2)) ~> aggregate1",
						"customer, sales join(customer@CustomerID == sales@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 aggregate(groupBy(customer@CustomerID,",
						"          CustomerName,",
						"          Email,",
						"          City,",
						"          Country),",
						"     TotalAmount = round(sum(TotalAmount),2)) ~> aggregate2",
						"product, sales join(product@ProductID == sales@ProductID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 aggregate(groupBy(product@ProductID,",
						"          ProductName,",
						"          Category,",
						"          StockQuantity),",
						"     TotalSold = sum(Quantity),",
						"          RemainingStock = first(StockQuantity)-sum(Quantity)) ~> aggregate3",
						"lookup3 alterRow(upsertIf(iif(isNull(aggregate2@CustomerID),true(),false()))) ~> AlterRow1",
						"lookup2 alterRow(upsertIf(iif(isNull(aggregate3@ProductID),true(),false()))) ~> AlterRow2",
						"lookup1 alterRow(upsertIf(iif(!isNull(aggregate1@ProductID),true(),false())),",
						"     insertIf(iif(isNull(aggregate1@ProductID),true(),false()))) ~> AlterRow3",
						"aggregate1, product lookup(aggregate1@ProductID == product@ProductID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(product@ProductID, true),",
						"     broadcast: 'auto')~> lookup1",
						"aggregate3, product lookup(aggregate3@ProductID == product@ProductID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(product@ProductID, true),",
						"     broadcast: 'auto')~> lookup2",
						"window1, customer lookup(aggregate2@CustomerID == customer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(customer@CustomerID, true),",
						"     broadcast: 'auto')~> lookup3",
						"aggregate2 window(desc(TotalAmount, true),",
						"     Rank = rank()) ~> window1",
						"AlterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as decimal(10,2),",
						"          StockQuantity as integer,",
						"          TotalAmount as decimal(15,2)",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['ProductID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> revenueperproduct",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Category as string,",
						"          StockQuantity as integer,",
						"          TotalSold as integer,",
						"          RemainingStock as integer",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['ProductID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Inventory",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Email as string,",
						"          City as string,",
						"          Country as string,",
						"          TotalAmount as decimal(18,2)",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['CustomerID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TopCustomerSpend"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silverslaes')]",
				"[concat(variables('factoryId'), '/datasets/ds_silverproduct')]",
				"[concat(variables('factoryId'), '/datasets/ds_silvercust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mainpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "On-prem copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_custsql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_custtrgrt",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@trim(concat('cust_data_', formatDateTime(addhours(utcNow(),-4), 'yyyyMMdd_HH')))",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Productcopy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get parentfolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "products",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_rawdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_productbronze",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@trim(concat('product_data_', formatDateTime(addHours(utcNow(), -4), 'yyyy-MM-dd-HH-mm-ss'), '.csv'))\n",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get parentfolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_rawdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "dflow_customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "On-prem copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dflow_customers",
								"type": "DataFlowReference",
								"parameters": {
									"Filename": "concat('cust_data_',toString(year(currentDate())),toString(month(currentDate())),toString(dayOfMonth(currentDate())),'_',toString(hour(currentDate())))"
								},
								"datasetParameters": {
									"dscusttrgrt": {},
									"dssilvercust": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dflow_products",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Productcopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dflow_products",
								"type": "DataFlowReference",
								"parameters": {
									"filename": "concat('product_data_', \r\n       toString(year(currentDate())), '-', \r\n       lpad(toString(month(currentDate())), 2, '0'), '-', \r\n       lpad(toString(dayOfMonth(currentDate())), 2, '0'), '-', \r\n       lpad(toString(hour(currentDate())), 2, '0'), '-', \r\n       lpad(toString(minute(currentDate())), 2, '0'), '-', \r\n       lpad(toString(second(currentDate())), 2, '0'), \r\n       '.csv')\r\n"
								},
								"datasetParameters": {
									"productsource": {},
									"productsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dflow_sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "dflow_products",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dflow_sales",
								"type": "DataFlowReference",
								"parameters": {
									"Filename": "concat('sales_data_', \r\n    toString(year(currentDate())), '-', \r\n    toString(month(currentDate())), '-', \r\n    toString(dayOfMonth(currentDate())), '-',\r\n    toString(hour(currentDate())), '-',\r\n    toString(minute(currentDate())), '-',\r\n    toString(second(currentDate())))\r\n"
								},
								"datasetParameters": {
									"source1": {},
									"dssilversales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "silvertosql",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "dflow_sales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "silvertosql",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sales": {},
									"product": {},
									"customer": {},
									"revenueperproduct": {},
									"Inventory": {},
									"TopCustomerSpend": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-14T19:12:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dflow_customers')]",
				"[concat(variables('factoryId'), '/dataflows/dflow_products')]",
				"[concat(variables('factoryId'), '/dataflows/dflow_sales')]",
				"[concat(variables('factoryId'), '/dataflows/silvertosql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_tumblingtrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Restapipipeline",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2025-03-13T14:30:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Restapipipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_Scheduletrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Mainpipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2025-03-13T12:00:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Mainpipeline')]"
			]
		}
	]
}